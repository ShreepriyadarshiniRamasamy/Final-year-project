{"ast":null,"code":"const process = {\n  env: {\n    NODE_ENV: \"development\"\n  }\n};\nimport caloriesData from \"../../data/calories.json\";\nimport exerciseData from \"../../data/exercise.json\";\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n  handleCalorieQuery(weight) {\n    console.log(\"Received weight:\", weight);\n    console.log(\"Exercise Data:\", exerciseData);\n    console.log(\"Calorie Data:\", caloriesData);\n\n    // Ensure weight is properly parsed\n    const parsedWeight = parseFloat(weight);\n    if (isNaN(parsedWeight)) {\n      const message = this.createChatBotMessage(\"Please provide a valid weight in numbers.\");\n      this.setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, message]\n      }));\n      return;\n    }\n\n    // Find the user with the given weight in exercise.json\n    const user = exerciseData.find(entry => parseFloat(entry.Weight) === parsedWeight);\n    if (user) {\n      // Find the calories for the matched User_ID\n      const userCalories = caloriesData.find(entry => entry.User_ID === user.User_ID);\n      let message;\n      if (userCalories) {\n        message = this.createChatBotMessage(`Based on our data, a person weighing ${parsedWeight} kg (User ID: ${user.User_ID}) burned around ${userCalories.Calories} kcal.`);\n      } else {\n        message = this.createChatBotMessage(\"I couldn't find the exact calorie data for your weight. Please provide more details like age and activity level!\");\n      }\n      this.setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, message]\n      }));\n    } else {\n      const message = this.createChatBotMessage(\"Sorry, I couldn't find any matching user data for this weight.\");\n      this.setState(prev => ({\n        ...prev,\n        messages: [...prev.messages, message]\n      }));\n    }\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["process","env","NODE_ENV","caloriesData","exerciseData","ActionProvider","constructor","createChatBotMessage","setStateFunc","setState","handleCalorieQuery","weight","console","log","parsedWeight","parseFloat","isNaN","message","prev","messages","user","find","entry","Weight","userCalories","User_ID","Calories"],"sources":["C:/Users/shrut/OneDrive/Documents/project/Food/food-nutrients Phase-II/src/components/chatbot/ActionProvider.js"],"sourcesContent":["const process = { env: { NODE_ENV: \"development\" } };\r\n\r\nimport caloriesData from \"../../data/calories.json\";\r\nimport exerciseData from \"../../data/exercise.json\";\r\n\r\n\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n\r\n  handleCalorieQuery(weight) {\r\n    console.log(\"Received weight:\", weight);\r\n    console.log(\"Exercise Data:\", exerciseData);\r\n    console.log(\"Calorie Data:\", caloriesData);\r\n\r\n    // Ensure weight is properly parsed\r\n    const parsedWeight = parseFloat(weight);\r\n    if (isNaN(parsedWeight)) {\r\n      const message = this.createChatBotMessage(\"Please provide a valid weight in numbers.\");\r\n      this.setState(prev => ({\r\n        ...prev,\r\n        messages: [...prev.messages, message],\r\n      }));\r\n      return;\r\n    }\r\n\r\n    // Find the user with the given weight in exercise.json\r\n    const user = exerciseData.find(entry => parseFloat(entry.Weight) === parsedWeight);\r\n\r\n    if (user) {\r\n      // Find the calories for the matched User_ID\r\n      const userCalories = caloriesData.find(entry => entry.User_ID === user.User_ID);\r\n\r\n      let message;\r\n      if (userCalories) {\r\n        message = this.createChatBotMessage(\r\n          `Based on our data, a person weighing ${parsedWeight} kg (User ID: ${user.User_ID}) burned around ${userCalories.Calories} kcal.`\r\n        );\r\n      } else {\r\n        message = this.createChatBotMessage(\r\n          \"I couldn't find the exact calorie data for your weight. Please provide more details like age and activity level!\"\r\n        );\r\n      }\r\n\r\n      this.setState(prev => ({\r\n        ...prev,\r\n        messages: [...prev.messages, message],\r\n      }));\r\n    } else {\r\n      const message = this.createChatBotMessage(\r\n        \"Sorry, I couldn't find any matching user data for this weight.\"\r\n      );\r\n      this.setState(prev => ({\r\n        ...prev,\r\n        messages: [...prev.messages, message],\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nexport default ActionProvider;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG;EAAEC,GAAG,EAAE;IAAEC,QAAQ,EAAE;EAAc;AAAE,CAAC;AAEpD,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,YAAY,MAAM,0BAA0B;AAGnD,MAAMC,cAAc,CAAC;EACnBC,WAAW,CAACC,oBAAoB,EAAEC,YAAY,EAAE;IAC9C,IAAI,CAACD,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACE,QAAQ,GAAGD,YAAY;EAC9B;EAEAE,kBAAkB,CAACC,MAAM,EAAE;IACzBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,MAAM,CAAC;IACvCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAET,YAAY,CAAC;IAC3CQ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEV,YAAY,CAAC;;IAE1C;IACA,MAAMW,YAAY,GAAGC,UAAU,CAACJ,MAAM,CAAC;IACvC,IAAIK,KAAK,CAACF,YAAY,CAAC,EAAE;MACvB,MAAMG,OAAO,GAAG,IAAI,CAACV,oBAAoB,CAAC,2CAA2C,CAAC;MACtF,IAAI,CAACE,QAAQ,CAACS,IAAI,KAAK;QACrB,GAAGA,IAAI;QACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEF,OAAO;MACtC,CAAC,CAAC,CAAC;MACH;IACF;;IAEA;IACA,MAAMG,IAAI,GAAGhB,YAAY,CAACiB,IAAI,CAACC,KAAK,IAAIP,UAAU,CAACO,KAAK,CAACC,MAAM,CAAC,KAAKT,YAAY,CAAC;IAElF,IAAIM,IAAI,EAAE;MACR;MACA,MAAMI,YAAY,GAAGrB,YAAY,CAACkB,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACG,OAAO,KAAKL,IAAI,CAACK,OAAO,CAAC;MAE/E,IAAIR,OAAO;MACX,IAAIO,YAAY,EAAE;QAChBP,OAAO,GAAG,IAAI,CAACV,oBAAoB,CAChC,wCAAuCO,YAAa,iBAAgBM,IAAI,CAACK,OAAQ,mBAAkBD,YAAY,CAACE,QAAS,QAAO,CAClI;MACH,CAAC,MAAM;QACLT,OAAO,GAAG,IAAI,CAACV,oBAAoB,CACjC,kHAAkH,CACnH;MACH;MAEA,IAAI,CAACE,QAAQ,CAACS,IAAI,KAAK;QACrB,GAAGA,IAAI;QACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEF,OAAO;MACtC,CAAC,CAAC,CAAC;IACL,CAAC,MAAM;MACL,MAAMA,OAAO,GAAG,IAAI,CAACV,oBAAoB,CACvC,gEAAgE,CACjE;MACD,IAAI,CAACE,QAAQ,CAACS,IAAI,KAAK;QACrB,GAAGA,IAAI;QACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEF,OAAO;MACtC,CAAC,CAAC,CAAC;IACL;EACF;AACF;AAEA,eAAeZ,cAAc"},"metadata":{},"sourceType":"module"}