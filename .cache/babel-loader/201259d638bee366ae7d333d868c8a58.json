{"ast":null,"code":"export const defaultMacroNutrients = {\n  calories: {\n    name: 'Calories',\n    raw: 0,\n    amount: 0,\n    unit: 'kcal'\n  },\n  proteins: {\n    name: 'Proteins',\n    raw: 0,\n    amount: 0,\n    unit: 'μg'\n  },\n  carbs: {\n    name: 'Carbs',\n    raw: 0,\n    amount: 0,\n    unit: 'μg'\n  },\n  fats: {\n    name: 'Fats',\n    raw: 0,\n    amount: 0,\n    unit: 'μg'\n  }\n};\nexport const calculateMacroNutrients = selectedFoods$ => {\n  const macroNutrients = JSON.parse(JSON.stringify(defaultMacroNutrients));\n  selectedFoods$.subscribe(selectedFood => {\n    selectedFood.amount = selectedFood.amount || 0;\n    macroNutrients.calories.raw += selectedFood.food.calories * selectedFood.amount;\n    macroNutrients.proteins.raw += selectedFood.food.proteins * selectedFood.amount;\n    macroNutrients.carbs.raw += selectedFood.food.carbohydrates * selectedFood.amount;\n    macroNutrients.fats.raw += selectedFood.food.fat * selectedFood.amount;\n  }, err => console.error(err), () => {\n    macroNutrients.calories = formatMacroNutrient(macroNutrients.calories, ['kcal']);\n    macroNutrients.proteins = formatMacroNutrient(macroNutrients.proteins, ['g', 'mg', 'μg']);\n    macroNutrients.carbs = formatMacroNutrient(macroNutrients.carbs, ['g', 'mg', 'μg']);\n    macroNutrients.fats = formatMacroNutrient(macroNutrients.fats, ['g', 'mg', 'μg']);\n  });\n  return macroNutrients;\n};\nconst formatMacroNutrient = (macroNutrient, units) => Object.assign(macroNutrient, unitize(macroNutrient.raw, units));\nexport const unitize = (amount, units) => {\n  let unit = units.pop();\n  while (amount >= 1000) {\n    if (units.length === 0) {\n      return {\n        amount: parseFloat(parseFloat(amount).toFixed(2)),\n        unit\n      };\n    }\n    amount /= 1000;\n    unit = units.pop();\n  }\n  return {\n    amount: parseFloat(parseFloat(amount).toFixed(2)),\n    unit\n  };\n};\nconst getMicroNutrientsDefaults = nutrients$ => {\n  const microNutrients = {};\n  nutrients$.subscribe(nutrient => {\n    if (!microNutrients[nutrient.name]) {\n      microNutrients[nutrient.name] = {\n        rda: nutrient.rda,\n        raw: 0,\n        amount: 0,\n        unit: 'μg',\n        percentage: 0\n      };\n    }\n  }, err => console.log(err), () => {});\n  return microNutrients;\n};\nconst percentage = (amount, total) => parseInt(amount * 100 / total, 10);\nexport const calculateMicroNutrients = (selectedFoods$, nutrients$) => {\n  const microNutrients = getMicroNutrientsDefaults(nutrients$);\n  selectedFoods$.subscribe(selectedFood => {\n    nutrients$.subscribe(nutrient => {\n      const foodNutrients = selectedFood.food.nutrients[nutrient.name];\n      microNutrients[nutrient.name].raw += (foodNutrients || 0) * selectedFood.amount;\n    }, err => console.error(err), () => {\n      nutrients$.subscribe(nutrient => {\n        microNutrients[nutrient.name].percentage = percentage(microNutrients[nutrient.name].raw, nutrient.rda);\n        microNutrients[nutrient.name].raw = parseInt(microNutrients[nutrient.name].raw, 10);\n        const r = unitize(microNutrients[nutrient.name].raw, ['g', 'mg', 'μg']);\n        microNutrients[nutrient.name].amount = r.amount;\n        microNutrients[nutrient.name].unit = r.unit;\n      });\n    });\n  });\n  return microNutrients;\n};","map":{"version":3,"names":["defaultMacroNutrients","calories","name","raw","amount","unit","proteins","carbs","fats","calculateMacroNutrients","selectedFoods$","macroNutrients","JSON","parse","stringify","subscribe","selectedFood","food","carbohydrates","fat","err","console","error","formatMacroNutrient","macroNutrient","units","Object","assign","unitize","pop","length","parseFloat","toFixed","getMicroNutrientsDefaults","nutrients$","microNutrients","nutrient","rda","percentage","log","total","parseInt","calculateMicroNutrients","foodNutrients","nutrients","r"],"sources":["C:/food/food-nutrients-master/src/components/calculations.js"],"sourcesContent":["export const defaultMacroNutrients = {\n  calories: {\n    name: 'Calories',\n    raw: 0,\n    amount: 0,\n    unit: 'kcal',\n  },\n  proteins: {\n    name: 'Proteins',\n    raw: 0,\n    amount: 0,\n    unit: 'μg',\n  },\n  carbs: {\n    name: 'Carbs',\n    raw: 0,\n    amount: 0,\n    unit: 'μg',\n  },\n  fats: {\n    name: 'Fats',\n    raw: 0,\n    amount: 0,\n    unit: 'μg',\n  },\n}\nexport const calculateMacroNutrients = selectedFoods$ => {\n  const macroNutrients = JSON.parse(JSON.stringify(defaultMacroNutrients))\n  selectedFoods$.subscribe(\n    selectedFood => {\n      selectedFood.amount = selectedFood.amount || 0\n      macroNutrients.calories.raw += selectedFood.food.calories * selectedFood.amount\n      macroNutrients.proteins.raw += selectedFood.food.proteins * selectedFood.amount\n      macroNutrients.carbs.raw += selectedFood.food.carbohydrates * selectedFood.amount\n      macroNutrients.fats.raw += selectedFood.food.fat * selectedFood.amount\n    },\n    err => console.error(err),\n    () => {\n      macroNutrients.calories = formatMacroNutrient(macroNutrients.calories, ['kcal'])\n      macroNutrients.proteins = formatMacroNutrient(macroNutrients.proteins, ['g', 'mg', 'μg'])\n      macroNutrients.carbs = formatMacroNutrient(macroNutrients.carbs, ['g', 'mg', 'μg'])\n      macroNutrients.fats = formatMacroNutrient(macroNutrients.fats, ['g', 'mg', 'μg'])\n    },\n  )\n\n  return macroNutrients\n}\nconst formatMacroNutrient = (macroNutrient, units) =>\n  Object.assign(macroNutrient, unitize(macroNutrient.raw, units))\n\nexport const unitize = (amount, units) => {\n  let unit = units.pop()\n  while (amount >= 1000) {\n    if (units.length === 0) {\n      return {\n        amount: parseFloat(parseFloat(amount).toFixed(2)),\n        unit,\n      }\n    }\n    amount /= 1000\n    unit = units.pop()\n  }\n  return {\n    amount: parseFloat(parseFloat(amount).toFixed(2)),\n    unit,\n  }\n}\nconst getMicroNutrientsDefaults = nutrients$ => {\n  const microNutrients = {}\n  nutrients$.subscribe(\n    nutrient => {\n      if (!microNutrients[nutrient.name]) {\n        microNutrients[nutrient.name] = {\n          rda: nutrient.rda,\n          raw: 0,\n          amount: 0,\n          unit: 'μg',\n          percentage: 0,\n        }\n      }\n    },\n    err => console.log(err),\n    () => {},\n  )\n  return microNutrients\n}\nconst percentage = (amount, total) => parseInt((amount * 100) / total, 10)\n\nexport const calculateMicroNutrients = (selectedFoods$, nutrients$) => {\n  const microNutrients = getMicroNutrientsDefaults(nutrients$)\n\n  selectedFoods$.subscribe(selectedFood => {\n    nutrients$.subscribe(\n      nutrient => {\n        const foodNutrients = selectedFood.food.nutrients[nutrient.name]\n        microNutrients[nutrient.name].raw += (foodNutrients || 0) * selectedFood.amount\n      },\n      err => console.error(err),\n      () => {\n        nutrients$.subscribe(nutrient => {\n          microNutrients[nutrient.name].percentage = percentage(\n            microNutrients[nutrient.name].raw,\n            nutrient.rda,\n          )\n          microNutrients[nutrient.name].raw = parseInt(microNutrients[nutrient.name].raw, 10)\n          const r = unitize(microNutrients[nutrient.name].raw, ['g', 'mg', 'μg'])\n          microNutrients[nutrient.name].amount = r.amount\n          microNutrients[nutrient.name].unit = r.unit\n        })\n      },\n    )\n  })\n\n  return microNutrients\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}