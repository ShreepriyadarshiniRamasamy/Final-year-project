{"ast":null,"code":"import caloriesData from \"../../data/calories.json\"; // Updated path\nimport exerciseData from \"../../data/exercise.json\"; // Updated path\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n\n  // Function to get calorie recommendation based on weight, age, and activity level\n  handleCalorieQuery(_ref) {\n    let {\n      weight,\n      age,\n      activity\n    } = _ref;\n    // Finding the closest match in the dataset\n    const userCalories = caloriesData.find(entry => entry.Weight == weight);\n    let message;\n    if (userCalories) {\n      message = this.createChatBotMessage(`For a person weighing ${weight} kg, the recommended daily calorie intake is around ${userCalories.calories} kcal.`);\n    } else {\n      message = this.createChatBotMessage(\"I couldn't find the exact calorie data for your weight. Please provide more details like age and activity level!\");\n    }\n    this.updateChatbotState(message);\n  }\n\n  // Function to provide exercise-based calorie burn estimation\n  handleExerciseQuery(_ref2) {\n    let {\n      weight,\n      duration,\n      activity\n    } = _ref2;\n    const exerciseEntry = exerciseData.find(entry => entry.Weight == weight);\n    let message;\n    if (exerciseEntry) {\n      const caloriesBurned = exerciseEntry.Duration / 60 * exerciseEntry.calories; // Example formula\n      message = this.createChatBotMessage(`If you do ${activity} for ${duration} minutes, you may burn around ${caloriesBurned.toFixed(2)} kcal.`);\n    } else {\n      message = this.createChatBotMessage(\"I couldn't find specific data for your weight and activity. Try another query!\");\n    }\n    this.updateChatbotState(message);\n  }\n\n  // Default response for unrecognized queries\n  handleUnknown() {\n    const message = this.createChatBotMessage(\"I'm not sure how to respond to that. Could you rephrase?\");\n    this.updateChatbotState(message);\n  }\n\n  // Helper function to update chatbot state\n  updateChatbotState(message) {\n    this.setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message]\n    }));\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["caloriesData","exerciseData","ActionProvider","constructor","createChatBotMessage","setStateFunc","setState","handleCalorieQuery","weight","age","activity","userCalories","find","entry","Weight","message","calories","updateChatbotState","handleExerciseQuery","duration","exerciseEntry","caloriesBurned","Duration","toFixed","handleUnknown","prev","messages"],"sources":["C:/Users/shrut/OneDrive/Documents/project/Food/food-nutrients Phase-II/src/components/chatbot/ActionProvider.js"],"sourcesContent":["import caloriesData from \"../../data/calories.json\"; // Updated path\r\nimport exerciseData from \"../../data/exercise.json\"; // Updated path\r\n\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n\r\n  // Function to get calorie recommendation based on weight, age, and activity level\r\n  handleCalorieQuery({ weight, age, activity }) {\r\n    // Finding the closest match in the dataset\r\n    const userCalories = caloriesData.find(entry => entry.Weight == weight);\r\n\r\n    let message;\r\n    if (userCalories) {\r\n      message = this.createChatBotMessage(\r\n        `For a person weighing ${weight} kg, the recommended daily calorie intake is around ${userCalories.calories} kcal.`\r\n      );\r\n    } else {\r\n      message = this.createChatBotMessage(\r\n        \"I couldn't find the exact calorie data for your weight. Please provide more details like age and activity level!\"\r\n      );\r\n    }\r\n\r\n    this.updateChatbotState(message);\r\n  }\r\n\r\n  // Function to provide exercise-based calorie burn estimation\r\n  handleExerciseQuery({ weight, duration, activity }) {\r\n    const exerciseEntry = exerciseData.find(entry => entry.Weight == weight);\r\n\r\n    let message;\r\n    if (exerciseEntry) {\r\n      const caloriesBurned = (exerciseEntry.Duration / 60) * exerciseEntry.calories; // Example formula\r\n      message = this.createChatBotMessage(\r\n        `If you do ${activity} for ${duration} minutes, you may burn around ${caloriesBurned.toFixed(2)} kcal.`\r\n      );\r\n    } else {\r\n      message = this.createChatBotMessage(\r\n        \"I couldn't find specific data for your weight and activity. Try another query!\"\r\n      );\r\n    }\r\n\r\n    this.updateChatbotState(message);\r\n  }\r\n\r\n  // Default response for unrecognized queries\r\n  handleUnknown() {\r\n    const message = this.createChatBotMessage(\r\n      \"I'm not sure how to respond to that. Could you rephrase?\"\r\n    );\r\n    this.updateChatbotState(message);\r\n  }\r\n\r\n  // Helper function to update chatbot state\r\n  updateChatbotState(message) {\r\n    this.setState(prev => ({\r\n      ...prev,\r\n      messages: [...prev.messages, message],\r\n    }));\r\n  }\r\n}\r\n\r\nexport default ActionProvider;\r\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,0BAA0B,CAAC,CAAC;AACrD,OAAOC,YAAY,MAAM,0BAA0B,CAAC,CAAC;;AAErD,MAAMC,cAAc,CAAC;EACnBC,WAAW,CAACC,oBAAoB,EAAEC,YAAY,EAAE;IAC9C,IAAI,CAACD,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACE,QAAQ,GAAGD,YAAY;EAC9B;;EAEA;EACAE,kBAAkB,OAA4B;IAAA,IAA3B;MAAEC,MAAM;MAAEC,GAAG;MAAEC;IAAS,CAAC;IAC1C;IACA,MAAMC,YAAY,GAAGX,YAAY,CAACY,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,MAAM,IAAIN,MAAM,CAAC;IAEvE,IAAIO,OAAO;IACX,IAAIJ,YAAY,EAAE;MAChBI,OAAO,GAAG,IAAI,CAACX,oBAAoB,CAChC,yBAAwBI,MAAO,uDAAsDG,YAAY,CAACK,QAAS,QAAO,CACpH;IACH,CAAC,MAAM;MACLD,OAAO,GAAG,IAAI,CAACX,oBAAoB,CACjC,kHAAkH,CACnH;IACH;IAEA,IAAI,CAACa,kBAAkB,CAACF,OAAO,CAAC;EAClC;;EAEA;EACAG,mBAAmB,QAAiC;IAAA,IAAhC;MAAEV,MAAM;MAAEW,QAAQ;MAAET;IAAS,CAAC;IAChD,MAAMU,aAAa,GAAGnB,YAAY,CAACW,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,MAAM,IAAIN,MAAM,CAAC;IAExE,IAAIO,OAAO;IACX,IAAIK,aAAa,EAAE;MACjB,MAAMC,cAAc,GAAID,aAAa,CAACE,QAAQ,GAAG,EAAE,GAAIF,aAAa,CAACJ,QAAQ,CAAC,CAAC;MAC/ED,OAAO,GAAG,IAAI,CAACX,oBAAoB,CAChC,aAAYM,QAAS,QAAOS,QAAS,iCAAgCE,cAAc,CAACE,OAAO,CAAC,CAAC,CAAE,QAAO,CACxG;IACH,CAAC,MAAM;MACLR,OAAO,GAAG,IAAI,CAACX,oBAAoB,CACjC,gFAAgF,CACjF;IACH;IAEA,IAAI,CAACa,kBAAkB,CAACF,OAAO,CAAC;EAClC;;EAEA;EACAS,aAAa,GAAG;IACd,MAAMT,OAAO,GAAG,IAAI,CAACX,oBAAoB,CACvC,0DAA0D,CAC3D;IACD,IAAI,CAACa,kBAAkB,CAACF,OAAO,CAAC;EAClC;;EAEA;EACAE,kBAAkB,CAACF,OAAO,EAAE;IAC1B,IAAI,CAACT,QAAQ,CAACmB,IAAI,KAAK;MACrB,GAAGA,IAAI;MACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEX,OAAO;IACtC,CAAC,CAAC,CAAC;EACL;AACF;AAEA,eAAeb,cAAc"},"metadata":{},"sourceType":"module"}