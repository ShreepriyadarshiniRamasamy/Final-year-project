{"ast":null,"code":"import caloriesData from \"./data/calories.json\";\nimport exerciseData from \"./data/exercise.json\";\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n\n  // Function to get calorie recommendation based on weight\n  handleCalorieQuery(weight) {\n    const userCalories = caloriesData.find(entry => entry.weight == weight);\n    let message;\n    if (userCalories) {\n      message = this.createChatBotMessage(`For a person weighing ${weight} kg, the recommended daily calorie intake is around ${userCalories.calories} kcal.`);\n    } else {\n      message = this.createChatBotMessage(\"I couldn't find the exact calorie data for your weight. Please provide more details like age and activity level!\");\n    }\n    this.setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message]\n    }));\n  }\n\n  // Default response for unrecognized queries\n  handleUnknown() {\n    const message = this.createChatBotMessage(\"I'm not sure how to respond to that. Could you rephrase?\");\n    this.setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, message]\n    }));\n  }\n}\nexport default ActionProvider;","map":{"version":3,"names":["caloriesData","exerciseData","ActionProvider","constructor","createChatBotMessage","setStateFunc","setState","handleCalorieQuery","weight","userCalories","find","entry","message","calories","prev","messages","handleUnknown"],"sources":["C:/Users/shrut/OneDrive/Documents/project/Food/food-nutrients Phase-II/src/components/chatbot/ActionProvider.js"],"sourcesContent":["import caloriesData from \"./data/calories.json\";\r\nimport exerciseData from \"./data/exercise.json\";\r\n\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n\r\n  // Function to get calorie recommendation based on weight\r\n  handleCalorieQuery(weight) {\r\n    const userCalories = caloriesData.find(entry => entry.weight == weight);\r\n\r\n    let message;\r\n    if (userCalories) {\r\n      message = this.createChatBotMessage(\r\n        `For a person weighing ${weight} kg, the recommended daily calorie intake is around ${userCalories.calories} kcal.`\r\n      );\r\n    } else {\r\n      message = this.createChatBotMessage(\r\n        \"I couldn't find the exact calorie data for your weight. Please provide more details like age and activity level!\"\r\n      );\r\n    }\r\n\r\n    this.setState(prev => ({\r\n      ...prev,\r\n      messages: [...prev.messages, message],\r\n    }));\r\n  }\r\n\r\n  // Default response for unrecognized queries\r\n  handleUnknown() {\r\n    const message = this.createChatBotMessage(\"I'm not sure how to respond to that. Could you rephrase?\");\r\n    this.setState(prev => ({\r\n      ...prev,\r\n      messages: [...prev.messages, message],\r\n    }));\r\n  }\r\n}\r\n\r\nexport default ActionProvider;\r\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,YAAY,MAAM,sBAAsB;AAE/C,MAAMC,cAAc,CAAC;EACnBC,WAAW,CAACC,oBAAoB,EAAEC,YAAY,EAAE;IAC9C,IAAI,CAACD,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACE,QAAQ,GAAGD,YAAY;EAC9B;;EAEA;EACAE,kBAAkB,CAACC,MAAM,EAAE;IACzB,MAAMC,YAAY,GAAGT,YAAY,CAACU,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACH,MAAM,IAAIA,MAAM,CAAC;IAEvE,IAAII,OAAO;IACX,IAAIH,YAAY,EAAE;MAChBG,OAAO,GAAG,IAAI,CAACR,oBAAoB,CAChC,yBAAwBI,MAAO,uDAAsDC,YAAY,CAACI,QAAS,QAAO,CACpH;IACH,CAAC,MAAM;MACLD,OAAO,GAAG,IAAI,CAACR,oBAAoB,CACjC,kHAAkH,CACnH;IACH;IAEA,IAAI,CAACE,QAAQ,CAACQ,IAAI,KAAK;MACrB,GAAGA,IAAI;MACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEH,OAAO;IACtC,CAAC,CAAC,CAAC;EACL;;EAEA;EACAI,aAAa,GAAG;IACd,MAAMJ,OAAO,GAAG,IAAI,CAACR,oBAAoB,CAAC,0DAA0D,CAAC;IACrG,IAAI,CAACE,QAAQ,CAACQ,IAAI,KAAK;MACrB,GAAGA,IAAI;MACPC,QAAQ,EAAE,CAAC,GAAGD,IAAI,CAACC,QAAQ,EAAEH,OAAO;IACtC,CAAC,CAAC,CAAC;EACL;AACF;AAEA,eAAeV,cAAc"},"metadata":{},"sourceType":"module"}