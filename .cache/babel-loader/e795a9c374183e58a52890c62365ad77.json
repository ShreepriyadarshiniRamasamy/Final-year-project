{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport KeyCode from 'rc-util/es/KeyCode';\nimport contains from 'rc-util/es/Dom/contains';\nimport Animate from 'rc-animate';\nimport LazyRenderBox from './LazyRenderBox';\nimport getScrollBarSize from 'rc-util/es/getScrollBarSize';\nvar uuid = 0;\nvar openCount = 0;\n/* eslint react/no-is-mounted:0 */\nfunction getScroll(w, top) {\n  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];\n  var method = 'scroll' + (top ? 'Top' : 'Left');\n  if (typeof ret !== 'number') {\n    var d = w.document;\n    ret = d.documentElement[method];\n    if (typeof ret !== 'number') {\n      ret = d.body[method];\n    }\n  }\n  return ret;\n}\nfunction setTransformOrigin(node, value) {\n  var style = node.style;\n  ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {\n    style[prefix + 'TransformOrigin'] = value;\n  });\n  style['transformOrigin'] = value;\n}\nfunction offset(el) {\n  var rect = el.getBoundingClientRect();\n  var pos = {\n    left: rect.left,\n    top: rect.top\n  };\n  var doc = el.ownerDocument;\n  var w = doc.defaultView || doc.parentWindow;\n  pos.left += getScroll(w);\n  pos.top += getScroll(w, true);\n  return pos;\n}\nvar Dialog = function (_React$Component) {\n  _inherits(Dialog, _React$Component);\n  function Dialog() {\n    _classCallCheck(this, Dialog);\n    var _this = _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n    _this.onAnimateLeave = function () {\n      var afterClose = _this.props.afterClose;\n      // need demo?\n      // https://github.com/react-component/dialog/pull/28\n\n      if (_this.wrap) {\n        _this.wrap.style.display = 'none';\n      }\n      _this.inTransition = false;\n      _this.removeScrollingEffect();\n      if (afterClose) {\n        afterClose();\n      }\n    };\n    _this.onDialogMouseDown = function () {\n      _this.dialogMouseDown = true;\n    };\n    _this.onMaskMouseUp = function () {\n      if (_this.dialogMouseDown) {\n        _this.timeoutId = setTimeout(function () {\n          _this.dialogMouseDown = false;\n        }, 0);\n      }\n    };\n    _this.onMaskClick = function (e) {\n      // android trigger click on open (fastclick??)\n      if (Date.now() - _this.openTime < 300) {\n        return;\n      }\n      if (e.target === e.currentTarget && !_this.dialogMouseDown) {\n        _this.close(e);\n      }\n    };\n    _this.onKeyDown = function (e) {\n      var props = _this.props;\n      if (props.keyboard && e.keyCode === KeyCode.ESC) {\n        e.stopPropagation();\n        _this.close(e);\n        return;\n      }\n      // keep focus inside dialog\n      if (props.visible) {\n        if (e.keyCode === KeyCode.TAB) {\n          var activeElement = document.activeElement;\n          var sentinelStart = _this.sentinelStart;\n          if (e.shiftKey) {\n            if (activeElement === sentinelStart) {\n              _this.sentinelEnd.focus();\n            }\n          } else if (activeElement === _this.sentinelEnd) {\n            sentinelStart.focus();\n          }\n        }\n      }\n    };\n    _this.getDialogElement = function () {\n      var props = _this.props;\n      var closable = props.closable;\n      var prefixCls = props.prefixCls;\n      var dest = {};\n      if (props.width !== undefined) {\n        dest.width = props.width;\n      }\n      if (props.height !== undefined) {\n        dest.height = props.height;\n      }\n      var footer = void 0;\n      if (props.footer) {\n        footer = React.createElement(\"div\", {\n          className: prefixCls + '-footer',\n          ref: _this.saveRef('footer')\n        }, props.footer);\n      }\n      var header = void 0;\n      if (props.title) {\n        header = React.createElement(\"div\", {\n          className: prefixCls + '-header',\n          ref: _this.saveRef('header')\n        }, React.createElement(\"div\", {\n          className: prefixCls + '-title',\n          id: _this.titleId\n        }, props.title));\n      }\n      var closer = void 0;\n      if (closable) {\n        closer = React.createElement(\"button\", {\n          onClick: _this.close,\n          \"aria-label\": \"Close\",\n          className: prefixCls + '-close'\n        }, props.closeIcon || React.createElement(\"span\", {\n          className: prefixCls + '-close-x'\n        }));\n      }\n      var style = _extends({}, props.style, dest);\n      var sentinelStyle = {\n        width: 0,\n        height: 0,\n        overflow: 'hidden'\n      };\n      var transitionName = _this.getTransitionName();\n      var dialogElement = React.createElement(LazyRenderBox, {\n        key: \"dialog-element\",\n        role: \"document\",\n        ref: _this.saveRef('dialog'),\n        style: style,\n        className: prefixCls + ' ' + (props.className || ''),\n        visible: props.visible,\n        onMouseDown: _this.onDialogMouseDown\n      }, React.createElement(\"div\", {\n        tabIndex: 0,\n        ref: _this.saveRef('sentinelStart'),\n        style: sentinelStyle\n      }, \"sentinelStart\"), React.createElement(\"div\", {\n        className: prefixCls + '-content'\n      }, closer, header, React.createElement(\"div\", _extends({\n        className: prefixCls + '-body',\n        style: props.bodyStyle,\n        ref: _this.saveRef('body')\n      }, props.bodyProps), props.children), footer), React.createElement(\"div\", {\n        tabIndex: 0,\n        ref: _this.saveRef('sentinelEnd'),\n        style: sentinelStyle\n      }, \"sentinelEnd\"));\n      return React.createElement(Animate, {\n        key: \"dialog\",\n        showProp: \"visible\",\n        onLeave: _this.onAnimateLeave,\n        transitionName: transitionName,\n        component: \"\",\n        transitionAppear: true\n      }, props.visible || !props.destroyOnClose ? dialogElement : null);\n    };\n    _this.getZIndexStyle = function () {\n      var style = {};\n      var props = _this.props;\n      if (props.zIndex !== undefined) {\n        style.zIndex = props.zIndex;\n      }\n      return style;\n    };\n    _this.getWrapStyle = function () {\n      return _extends({}, _this.getZIndexStyle(), _this.props.wrapStyle);\n    };\n    _this.getMaskStyle = function () {\n      return _extends({}, _this.getZIndexStyle(), _this.props.maskStyle);\n    };\n    _this.getMaskElement = function () {\n      var props = _this.props;\n      var maskElement = void 0;\n      if (props.mask) {\n        var maskTransition = _this.getMaskTransitionName();\n        maskElement = React.createElement(LazyRenderBox, _extends({\n          style: _this.getMaskStyle(),\n          key: \"mask\",\n          className: props.prefixCls + '-mask',\n          hiddenClassName: props.prefixCls + '-mask-hidden',\n          visible: props.visible\n        }, props.maskProps));\n        if (maskTransition) {\n          maskElement = React.createElement(Animate, {\n            key: \"mask\",\n            showProp: \"visible\",\n            transitionAppear: true,\n            component: \"\",\n            transitionName: maskTransition\n          }, maskElement);\n        }\n      }\n      return maskElement;\n    };\n    _this.getMaskTransitionName = function () {\n      var props = _this.props;\n      var transitionName = props.maskTransitionName;\n      var animation = props.maskAnimation;\n      if (!transitionName && animation) {\n        transitionName = props.prefixCls + '-' + animation;\n      }\n      return transitionName;\n    };\n    _this.getTransitionName = function () {\n      var props = _this.props;\n      var transitionName = props.transitionName;\n      var animation = props.animation;\n      if (!transitionName && animation) {\n        transitionName = props.prefixCls + '-' + animation;\n      }\n      return transitionName;\n    };\n    _this.setScrollbar = function () {\n      if (_this.bodyIsOverflowing && _this.scrollbarWidth !== undefined) {\n        document.body.style.paddingRight = _this.scrollbarWidth + 'px';\n      }\n    };\n    _this.addScrollingEffect = function () {\n      openCount++;\n      if (openCount !== 1) {\n        return;\n      }\n      _this.checkScrollbar();\n      _this.setScrollbar();\n      document.body.style.overflow = 'hidden';\n      // this.adjustDialog();\n    };\n\n    _this.removeScrollingEffect = function () {\n      openCount--;\n      if (openCount !== 0) {\n        return;\n      }\n      document.body.style.overflow = '';\n      _this.resetScrollbar();\n      // this.resetAdjustments();\n    };\n\n    _this.close = function (e) {\n      var onClose = _this.props.onClose;\n      if (onClose) {\n        onClose(e);\n      }\n    };\n    _this.checkScrollbar = function () {\n      var fullWindowWidth = window.innerWidth;\n      if (!fullWindowWidth) {\n        // workaround for missing window.innerWidth in IE8\n        var documentElementRect = document.documentElement.getBoundingClientRect();\n        fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n      }\n      _this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth;\n      if (_this.bodyIsOverflowing) {\n        _this.scrollbarWidth = getScrollBarSize();\n      }\n    };\n    _this.resetScrollbar = function () {\n      document.body.style.paddingRight = '';\n    };\n    _this.adjustDialog = function () {\n      if (_this.wrap && _this.scrollbarWidth !== undefined) {\n        var modalIsOverflowing = _this.wrap.scrollHeight > document.documentElement.clientHeight;\n        _this.wrap.style.paddingLeft = (!_this.bodyIsOverflowing && modalIsOverflowing ? _this.scrollbarWidth : '') + 'px';\n        _this.wrap.style.paddingRight = (_this.bodyIsOverflowing && !modalIsOverflowing ? _this.scrollbarWidth : '') + 'px';\n      }\n    };\n    _this.resetAdjustments = function () {\n      if (_this.wrap) {\n        _this.wrap.style.paddingLeft = _this.wrap.style.paddingLeft = '';\n      }\n    };\n    _this.saveRef = function (name) {\n      return function (node) {\n        _this[name] = node;\n      };\n    };\n    return _this;\n  }\n  Dialog.prototype.componentWillMount = function componentWillMount() {\n    this.inTransition = false;\n    this.titleId = 'rcDialogTitle' + uuid++;\n  };\n  Dialog.prototype.componentDidMount = function componentDidMount() {\n    this.componentDidUpdate({});\n    // if forceRender is true, set element style display to be none;\n    if (this.props.forceRender && this.wrap) {\n      this.wrap.style.display = 'none';\n    }\n  };\n  Dialog.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var props = this.props;\n    var mousePosition = this.props.mousePosition;\n    if (props.visible) {\n      // first show\n      if (!prevProps.visible) {\n        this.openTime = Date.now();\n        this.addScrollingEffect();\n        this.tryFocus();\n        var dialogNode = ReactDOM.findDOMNode(this.dialog);\n        if (mousePosition) {\n          var elOffset = offset(dialogNode);\n          setTransformOrigin(dialogNode, mousePosition.x - elOffset.left + 'px ' + (mousePosition.y - elOffset.top) + 'px');\n        } else {\n          setTransformOrigin(dialogNode, '');\n        }\n      }\n    } else if (prevProps.visible) {\n      this.inTransition = true;\n      if (props.mask && this.lastOutSideFocusNode) {\n        try {\n          this.lastOutSideFocusNode.focus();\n        } catch (e) {\n          this.lastOutSideFocusNode = null;\n        }\n        this.lastOutSideFocusNode = null;\n      }\n    }\n  };\n  Dialog.prototype.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.visible || this.inTransition) {\n      this.removeScrollingEffect();\n    }\n    clearTimeout(this.timeoutId);\n  };\n  Dialog.prototype.tryFocus = function tryFocus() {\n    if (!contains(this.wrap, document.activeElement)) {\n      this.lastOutSideFocusNode = document.activeElement;\n      this.sentinelStart.focus();\n    }\n  };\n  Dialog.prototype.render = function render() {\n    var props = this.props;\n    var prefixCls = props.prefixCls,\n      maskClosable = props.maskClosable;\n    var style = this.getWrapStyle();\n    // clear hide display\n    // and only set display after async anim, not here for hide\n    if (props.visible) {\n      style.display = null;\n    }\n    return React.createElement(\"div\", null, this.getMaskElement(), React.createElement(\"div\", _extends({\n      tabIndex: -1,\n      onKeyDown: this.onKeyDown,\n      className: prefixCls + '-wrap ' + (props.wrapClassName || ''),\n      ref: this.saveRef('wrap'),\n      onClick: maskClosable ? this.onMaskClick : null,\n      onMouseUp: maskClosable ? this.onMaskMouseUp : null,\n      role: \"dialog\",\n      \"aria-labelledby\": props.title ? this.titleId : null,\n      style: style\n    }, props.wrapProps), this.getDialogElement()));\n  };\n  return Dialog;\n}(React.Component);\nexport default Dialog;\nDialog.defaultProps = {\n  className: '',\n  mask: true,\n  visible: false,\n  keyboard: true,\n  closable: true,\n  maskClosable: true,\n  destroyOnClose: false,\n  prefixCls: 'rc-dialog'\n};","map":null,"metadata":{},"sourceType":"module"}