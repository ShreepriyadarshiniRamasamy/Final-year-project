{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport List from './list';\nimport Operation from './operation';\nimport Search from './search';\nimport warning from '../_util/warning';\nimport LocaleReceiver from '../locale-provider/LocaleReceiver';\nimport defaultLocale from '../locale-provider/default';\nimport { ConfigConsumer } from '../config-provider';\nimport { polyfill } from 'react-lifecycles-compat';\nfunction noop() {}\nvar Transfer = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Transfer, _React$Component);\n  function Transfer(props) {\n    var _this;\n    _classCallCheck(this, Transfer);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transfer).call(this, props));\n    _this.separatedDataSource = null;\n    _this.moveTo = function (direction) {\n      var _this$props = _this.props,\n        _this$props$targetKey = _this$props.targetKeys,\n        targetKeys = _this$props$targetKey === void 0 ? [] : _this$props$targetKey,\n        _this$props$dataSourc = _this$props.dataSource,\n        dataSource = _this$props$dataSourc === void 0 ? [] : _this$props$dataSourc,\n        onChange = _this$props.onChange;\n      var _this$state = _this.state,\n        sourceSelectedKeys = _this$state.sourceSelectedKeys,\n        targetSelectedKeys = _this$state.targetSelectedKeys;\n      var moveKeys = direction === 'right' ? sourceSelectedKeys : targetSelectedKeys; // filter the disabled options\n\n      var newMoveKeys = moveKeys.filter(function (key) {\n        return !dataSource.some(function (data) {\n          return !!(key === data.key && data.disabled);\n        });\n      }); // move items to target box\n\n      var newTargetKeys = direction === 'right' ? newMoveKeys.concat(targetKeys) : targetKeys.filter(function (targetKey) {\n        return newMoveKeys.indexOf(targetKey) === -1;\n      }); // empty checked keys\n\n      var oppositeDirection = direction === 'right' ? 'left' : 'right';\n      _this.setState(_defineProperty({}, _this.getSelectedKeysName(oppositeDirection), []));\n      _this.handleSelectChange(oppositeDirection, []);\n      if (onChange) {\n        onChange(newTargetKeys, direction, newMoveKeys);\n      }\n    };\n    _this.moveToLeft = function () {\n      return _this.moveTo('left');\n    };\n    _this.moveToRight = function () {\n      return _this.moveTo('right');\n    };\n    _this.handleSelectAll = function (direction, filteredDataSource, checkAll) {\n      var originalSelectedKeys = _this.state[_this.getSelectedKeysName(direction)] || [];\n      var currentKeys = filteredDataSource.map(function (item) {\n        return item.key;\n      }); // Only operate current keys from original selected keys\n\n      var newKeys1 = originalSelectedKeys.filter(function (key) {\n        return currentKeys.indexOf(key) === -1;\n      });\n      var newKeys2 = _toConsumableArray(originalSelectedKeys);\n      currentKeys.forEach(function (key) {\n        if (newKeys2.indexOf(key) === -1) {\n          newKeys2.push(key);\n        }\n      });\n      var holder = checkAll ? newKeys1 : newKeys2;\n      _this.handleSelectChange(direction, holder);\n      if (!_this.props.selectedKeys) {\n        _this.setState(_defineProperty({}, _this.getSelectedKeysName(direction), holder));\n      }\n    };\n    _this.handleLeftSelectAll = function (filteredDataSource, checkAll) {\n      return _this.handleSelectAll('left', filteredDataSource, checkAll);\n    };\n    _this.handleRightSelectAll = function (filteredDataSource, checkAll) {\n      return _this.handleSelectAll('right', filteredDataSource, checkAll);\n    };\n    _this.handleFilter = function (direction, e) {\n      var _this$props2 = _this.props,\n        onSearchChange = _this$props2.onSearchChange,\n        onSearch = _this$props2.onSearch;\n      var value = e.target.value;\n      _this.setState(_defineProperty({}, \"\".concat(direction, \"Filter\"), value));\n      if (onSearchChange) {\n        warning(false, 'Transfer', '`onSearchChange` is deprecated. Please use `onSearch` instead.');\n        onSearchChange(direction, e);\n      }\n      if (onSearch) {\n        onSearch(direction, value);\n      }\n    };\n    _this.handleLeftFilter = function (e) {\n      return _this.handleFilter('left', e);\n    };\n    _this.handleRightFilter = function (e) {\n      return _this.handleFilter('right', e);\n    };\n    _this.handleClear = function (direction) {\n      var onSearch = _this.props.onSearch;\n      _this.setState(_defineProperty({}, \"\".concat(direction, \"Filter\"), ''));\n      if (onSearch) {\n        onSearch(direction, '');\n      }\n    };\n    _this.handleLeftClear = function () {\n      return _this.handleClear('left');\n    };\n    _this.handleRightClear = function () {\n      return _this.handleClear('right');\n    };\n    _this.handleSelect = function (direction, selectedItem, checked) {\n      var _this$state2 = _this.state,\n        sourceSelectedKeys = _this$state2.sourceSelectedKeys,\n        targetSelectedKeys = _this$state2.targetSelectedKeys;\n      var holder = direction === 'left' ? _toConsumableArray(sourceSelectedKeys) : _toConsumableArray(targetSelectedKeys);\n      var index = holder.indexOf(selectedItem.key);\n      if (index > -1) {\n        holder.splice(index, 1);\n      }\n      if (checked) {\n        holder.push(selectedItem.key);\n      }\n      _this.handleSelectChange(direction, holder);\n      if (!_this.props.selectedKeys) {\n        _this.setState(_defineProperty({}, _this.getSelectedKeysName(direction), holder));\n      }\n    };\n    _this.handleLeftSelect = function (selectedItem, checked) {\n      return _this.handleSelect('left', selectedItem, checked);\n    };\n    _this.handleRightSelect = function (selectedItem, checked) {\n      return _this.handleSelect('right', selectedItem, checked);\n    };\n    _this.handleScroll = function (direction, e) {\n      var onScroll = _this.props.onScroll;\n      if (onScroll) {\n        onScroll(direction, e);\n      }\n    };\n    _this.handleLeftScroll = function (e) {\n      return _this.handleScroll('left', e);\n    };\n    _this.handleRightScroll = function (e) {\n      return _this.handleScroll('right', e);\n    };\n    _this.getLocale = function (transferLocale, renderEmpty) {\n      // Keep old locale props still working.\n      var oldLocale = {\n        notFoundContent: renderEmpty('Transfer')\n      };\n      if ('notFoundContent' in _this.props) {\n        oldLocale.notFoundContent = _this.props.notFoundContent;\n      }\n      if ('searchPlaceholder' in _this.props) {\n        oldLocale.searchPlaceholder = _this.props.searchPlaceholder;\n      }\n      return _extends({}, transferLocale, oldLocale, _this.props.locale);\n    };\n    _this.renderTransfer = function (transferLocale) {\n      return React.createElement(ConfigConsumer, null, function (_ref) {\n        var getPrefixCls = _ref.getPrefixCls,\n          renderEmpty = _ref.renderEmpty;\n        var _this$props3 = _this.props,\n          customizePrefixCls = _this$props3.prefixCls,\n          className = _this$props3.className,\n          disabled = _this$props3.disabled,\n          _this$props3$operatio = _this$props3.operations,\n          operations = _this$props3$operatio === void 0 ? [] : _this$props3$operatio,\n          showSearch = _this$props3.showSearch,\n          body = _this$props3.body,\n          footer = _this$props3.footer,\n          style = _this$props3.style,\n          listStyle = _this$props3.listStyle,\n          operationStyle = _this$props3.operationStyle,\n          filterOption = _this$props3.filterOption,\n          render = _this$props3.render,\n          lazy = _this$props3.lazy;\n        var prefixCls = getPrefixCls('transfer', customizePrefixCls);\n        var locale = _this.getLocale(transferLocale, renderEmpty);\n        var _this$state3 = _this.state,\n          leftFilter = _this$state3.leftFilter,\n          rightFilter = _this$state3.rightFilter,\n          sourceSelectedKeys = _this$state3.sourceSelectedKeys,\n          targetSelectedKeys = _this$state3.targetSelectedKeys;\n        var _this$separateDataSou = _this.separateDataSource(_this.props),\n          leftDataSource = _this$separateDataSou.leftDataSource,\n          rightDataSource = _this$separateDataSou.rightDataSource;\n        var leftActive = targetSelectedKeys.length > 0;\n        var rightActive = sourceSelectedKeys.length > 0;\n        var cls = classNames(className, prefixCls, disabled && \"\".concat(prefixCls, \"-disabled\"));\n        var titles = _this.getTitles(locale);\n        return React.createElement(\"div\", {\n          className: cls,\n          style: style\n        }, React.createElement(List, _extends({\n          prefixCls: \"\".concat(prefixCls, \"-list\"),\n          titleText: titles[0],\n          dataSource: leftDataSource,\n          filter: leftFilter,\n          filterOption: filterOption,\n          style: listStyle,\n          checkedKeys: sourceSelectedKeys,\n          handleFilter: _this.handleLeftFilter,\n          handleClear: _this.handleLeftClear,\n          handleSelect: _this.handleLeftSelect,\n          handleSelectAll: _this.handleLeftSelectAll,\n          render: render,\n          showSearch: showSearch,\n          body: body,\n          footer: footer,\n          lazy: lazy,\n          onScroll: _this.handleLeftScroll,\n          disabled: disabled\n        }, locale)), React.createElement(Operation, {\n          className: \"\".concat(prefixCls, \"-operation\"),\n          rightActive: rightActive,\n          rightArrowText: operations[0],\n          moveToRight: _this.moveToRight,\n          leftActive: leftActive,\n          leftArrowText: operations[1],\n          moveToLeft: _this.moveToLeft,\n          style: operationStyle,\n          disabled: disabled\n        }), React.createElement(List, _extends({\n          prefixCls: \"\".concat(prefixCls, \"-list\"),\n          titleText: titles[1],\n          dataSource: rightDataSource,\n          filter: rightFilter,\n          filterOption: filterOption,\n          style: listStyle,\n          checkedKeys: targetSelectedKeys,\n          handleFilter: _this.handleRightFilter,\n          handleClear: _this.handleRightClear,\n          handleSelect: _this.handleRightSelect,\n          handleSelectAll: _this.handleRightSelectAll,\n          render: render,\n          showSearch: showSearch,\n          body: body,\n          footer: footer,\n          lazy: lazy,\n          onScroll: _this.handleRightScroll,\n          disabled: disabled\n        }, locale)));\n      });\n    };\n    warning(!('notFoundContent' in props || 'searchPlaceholder' in props), 'Transfer', '`notFoundContent` and `searchPlaceholder` will be removed, ' + 'please use `locale` instead.');\n    var _props$selectedKeys = props.selectedKeys,\n      selectedKeys = _props$selectedKeys === void 0 ? [] : _props$selectedKeys,\n      _props$targetKeys = props.targetKeys,\n      targetKeys = _props$targetKeys === void 0 ? [] : _props$targetKeys;\n    _this.state = {\n      leftFilter: '',\n      rightFilter: '',\n      sourceSelectedKeys: selectedKeys.filter(function (key) {\n        return targetKeys.indexOf(key) === -1;\n      }),\n      targetSelectedKeys: selectedKeys.filter(function (key) {\n        return targetKeys.indexOf(key) > -1;\n      })\n    };\n    return _this;\n  }\n  _createClass(Transfer, [{\n    key: \"separateDataSource\",\n    value: function separateDataSource(props) {\n      var dataSource = props.dataSource,\n        rowKey = props.rowKey,\n        _props$targetKeys2 = props.targetKeys,\n        targetKeys = _props$targetKeys2 === void 0 ? [] : _props$targetKeys2;\n      var leftDataSource = [];\n      var rightDataSource = new Array(targetKeys.length);\n      dataSource.forEach(function (record) {\n        if (rowKey) {\n          record.key = rowKey(record);\n        } // rightDataSource should be ordered by targetKeys\n        // leftDataSource should be ordered by dataSource\n\n        var indexOfKey = targetKeys.indexOf(record.key);\n        if (indexOfKey !== -1) {\n          rightDataSource[indexOfKey] = record;\n        } else {\n          leftDataSource.push(record);\n        }\n      });\n      return {\n        leftDataSource: leftDataSource,\n        rightDataSource: rightDataSource\n      };\n    }\n  }, {\n    key: \"handleSelectChange\",\n    value: function handleSelectChange(direction, holder) {\n      var _this$state4 = this.state,\n        sourceSelectedKeys = _this$state4.sourceSelectedKeys,\n        targetSelectedKeys = _this$state4.targetSelectedKeys;\n      var onSelectChange = this.props.onSelectChange;\n      if (!onSelectChange) {\n        return;\n      }\n      if (direction === 'left') {\n        onSelectChange(holder, targetSelectedKeys);\n      } else {\n        onSelectChange(sourceSelectedKeys, holder);\n      }\n    }\n  }, {\n    key: \"getTitles\",\n    value: function getTitles(transferLocale) {\n      var props = this.props;\n      if (props.titles) {\n        return props.titles;\n      }\n      return transferLocale.titles;\n    }\n  }, {\n    key: \"getSelectedKeysName\",\n    value: function getSelectedKeysName(direction) {\n      return direction === 'left' ? 'sourceSelectedKeys' : 'targetSelectedKeys';\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(LocaleReceiver, {\n        componentName: \"Transfer\",\n        defaultLocale: defaultLocale.Transfer\n      }, this.renderTransfer);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps) {\n      if (nextProps.selectedKeys) {\n        var targetKeys = nextProps.targetKeys || [];\n        return {\n          sourceSelectedKeys: nextProps.selectedKeys.filter(function (key) {\n            return !targetKeys.includes(key);\n          }),\n          targetSelectedKeys: nextProps.selectedKeys.filter(function (key) {\n            return targetKeys.includes(key);\n          })\n        };\n      }\n      return null;\n    }\n  }]);\n  return Transfer;\n}(React.Component); // For high-level customized Transfer @dqaria\n\nTransfer.List = List;\nTransfer.Operation = Operation;\nTransfer.Search = Search;\nTransfer.defaultProps = {\n  dataSource: [],\n  render: noop,\n  locale: {},\n  showSearch: false\n};\nTransfer.propTypes = {\n  prefixCls: PropTypes.string,\n  disabled: PropTypes.bool,\n  dataSource: PropTypes.array,\n  render: PropTypes.func,\n  targetKeys: PropTypes.array,\n  onChange: PropTypes.func,\n  height: PropTypes.number,\n  style: PropTypes.object,\n  listStyle: PropTypes.object,\n  operationStyle: PropTypes.object,\n  className: PropTypes.string,\n  titles: PropTypes.array,\n  operations: PropTypes.array,\n  showSearch: PropTypes.bool,\n  filterOption: PropTypes.func,\n  searchPlaceholder: PropTypes.string,\n  notFoundContent: PropTypes.node,\n  locale: PropTypes.object,\n  body: PropTypes.func,\n  footer: PropTypes.func,\n  rowKey: PropTypes.func,\n  lazy: PropTypes.oneOfType([PropTypes.object, PropTypes.bool])\n};\npolyfill(Transfer);\nexport default Transfer;","map":null,"metadata":{},"sourceType":"module"}